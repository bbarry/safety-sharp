//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the 'Generator.fsx' script.
//     Tuesday, 29 April 2014, 16:03:46
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SafetySharp.Modelchecking.Promela
{
    using System;
    using System.Collections.Immutable;

    using SafetySharp.Utilities;

    internal partial class Identifier : PromelaElement
    {
        /// <summary>
        ///     Gets the name of the identifier.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Identifier" /> class.
        /// </summary>
        /// <param name="name">The name of the identifier.</param>
        public Identifier(string name)
            : base()
        {
            Assert.ArgumentNotNullOrWhitespace(name, () => name);

            Validate(name);
            Name = name;
        }

        /// <summary>
        ///     Validates all of the given property values.
        /// </summary>
        /// <param name="name">The name of the identifier.</param>
        partial void Validate(string name);

        /// <summary>
        ///     Creates a copy of the <see cref="Identifier" /> instance, changing only the value of the
        ///     <see cref="Identifier.Name" /> property; if the property value has not changed, 
        ///     no copy is made and the original object is returned.
        /// </summary>
        /// <param name="name">The name of the identifier.</param>
        public Identifier WithName(string name)
        {
            return Update(name);
        }

        /// <summary>
        ///     Creates a new instance of the <see cref="Identifier" /> class if any of the property values
        ///     have changed; if none have changed, no copy is made and the original instance is returned.
        /// </summary>
        /// <param name="name">The name of the identifier.</param>
        public Identifier Update(string name)
        {
            if (Name != name)
                return new Identifier(name);

            return this;
        }

        /// <summary>
        ///     Implements the visitor pattern, calling <paramref name="visitor" />'s
        ///     <see cref="PromelaVisitor.VisitIdentifier(Identifier)" /> method.
        /// </summary>
        /// <param name="visitor">The visitor the type-specific visit method should be invoked on.</param>
        public override void Accept(PromelaVisitor visitor)
        {
            Assert.ArgumentNotNull(visitor, () => visitor);
            visitor.VisitIdentifier(this);
        }

        /// <summary>
        ///     Implements the visitor pattern, calling <paramref name="visitor" />'s
        ///     <see cref="PromelaVisitor{TResult}.VisitIdentifier(Identifier)" /> method.
        /// </summary>
        /// <typeparam name="TResult">The type of the value returned by <paramref name="visitor" />.</typeparam>
        /// <param name="visitor">The visitor the type-specific visit method should be invoked on.</param>
        public override TResult Accept<TResult>(PromelaVisitor<TResult> visitor)
        {
            Assert.ArgumentNotNull(visitor, () => visitor);
            return visitor.VisitIdentifier(this);
        }
    }
}

namespace SafetySharp.Modelchecking.Promela
{
    using System;
    using System.Collections.Immutable;

    using SafetySharp.Utilities;

    internal abstract partial class PromelaVisitor
    {
        /// <summary>
        ///     Visits an element of type <see cref="Identifier" />.
        /// </summary>
        /// <param name="identifier">The <see cref="Identifier" /> instance that should be visited.</param>
        public virtual void VisitIdentifier(Identifier identifier)
        {
            Assert.ArgumentNotNull(identifier, () => identifier);
        }
    }

    internal abstract partial class PromelaVisitor<TResult>
    {
        /// <summary>
        ///     Visits an element of type <see cref="Identifier" />.
        /// </summary>
        /// <param name="identifier">The <see cref="Identifier" /> instance that should be visited.</param>
        public virtual TResult VisitIdentifier(Identifier identifier)
        {
            Assert.ArgumentNotNull(identifier, () => identifier);
            return default(TResult);
        }
    }

    internal abstract partial class PromelaRewriter : PromelaVisitor<PromelaElement>
    {
        /// <summary>
        ///     Rewrites an element of type <see cref="Identifier" />.
        /// </summary>
        /// <param name="identifier">The <see cref="Identifier" /> instance that should be rewritten.</param>
        public override PromelaElement VisitIdentifier(Identifier identifier)
        {
            Assert.ArgumentNotNull(identifier, () => identifier);

            var name = identifier.Name;
            return identifier.Update(name);
        }
    }
}
