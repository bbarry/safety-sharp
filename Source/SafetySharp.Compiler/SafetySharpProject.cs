// The MIT License (MIT)
// 
// Copyright (c) 2014, Institute for Software & Systems Engineering
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace SafetySharp.Compiler
{
	using System;
	using System.IO;
	using System.Linq;
	using System.Threading;
	using CSharp.Diagnostics;
	using CSharp.Normalization;
	using Microsoft.CodeAnalysis;
	using Microsoft.CodeAnalysis.Diagnostics;
	using Microsoft.CodeAnalysis.Emit;
	using Microsoft.CodeAnalysis.MSBuild;
	using Modeling;
	using Utilities;

	/// <summary>
	///     Represents the Safety Sharp project that is compiled.
	/// </summary>
	internal class SafetySharpProject
	{
		/// <summary>
		///     The file name of the SafetySharp.Modeling assembly.
		/// </summary>
		private const string ModelingAssemblyFileName = "SafetySharp.Modeling.dll";

		/// <summary>
		///     The path to the emitted assembly file of the project.
		/// </summary>
		private readonly string _assemblyPath;

		/// <summary>
		///     The compilation for the project.
		/// </summary>
		private Compilation _compilation;

		/// <summary>
		///     The reference to the SafetySharp.Modeling assembly imported by the project.
		/// </summary>
		private PortableExecutableReference _modelingAssembly;

		/// <summary>
		///     Initializes a new instance of the <see cref="SafetySharpProject" /> type.
		/// </summary>
		public SafetySharpProject()
		{
			var workspace = MSBuildWorkspace.Create();
			var project = workspace.OpenProjectAsync(SafetySharpCompiler.Arguments.ProjectFile).Result;

			_compilation = project.GetCompilationAsync().Result;
			_assemblyPath = project.OutputFilePath;
		}

		/// <summary>
		///     Compiles the project.
		/// </summary>
		public int Compile()
		{
			if (!Diagnose())
				return -1;

			Rewrite();
			return Emit();
		}

		/// <summary>
		///     Runs all diagnostics on the project's code, returning <c>true</c> to indicate that no critical errors have been found
		///     and compilation can continue.
		/// </summary>
		private bool Diagnose()
		{
			_modelingAssembly = _compilation
				.References
				.OfType<PortableExecutableReference>()
				.SingleOrDefault(reference => Path.GetFileName(reference.FullPath) == ModelingAssemblyFileName);

			if (_modelingAssembly == null)
				Log.Die("{0}: error: Assembly '{1}' is not referenced.", SafetySharpCompiler.Arguments.ProjectFile, ModelingAssemblyFileName);

			var diagnostics = AnalyzerDriver.GetDiagnostics(_compilation, CSharpAnalyzer.GetAnalyzers(), new CancellationToken()).ToArray();
			foreach (var diagnostic in diagnostics)
				LogDiagnostic(diagnostic);

			return diagnostics.All(diagnostic => diagnostic.Severity != DiagnosticSeverity.Error);
		}

		/// <summary>
		///     Rewrites the Safety Sharp code to improve the debugging and simulation experiences.
		/// </summary>
		private void Rewrite()
		{
			var safetySharpAssembly = new MetadataFileReference(typeof(Component).Assembly.Location);
			_compilation = _compilation.ReplaceReference(_modelingAssembly, safetySharpAssembly);

			foreach (var normalizer in CSharpNormalizer.GetNormalizers())
				_compilation = normalizer.Normalize(_compilation);
		}

		/// <summary>
		///     Overwrites the original assembly generated by the C# compiler with the assembly compiled from the rewritten code.
		/// </summary>
		private int Emit()
		{
			EmitResult emitResult;
			using (var ilStream = new FileStream(_assemblyPath, FileMode.OpenOrCreate))
				emitResult = _compilation.Emit(ilStream);

			if (emitResult.Success)
				return 0;

			foreach (var diagnostic in emitResult.Diagnostics)
				LogDiagnostic(diagnostic);

			return -1;
		}

		/// <summary>
		///     Logs <paramref name="diagnostic" /> depending on its severity.
		/// </summary>
		/// <param name="diagnostic">The diagnostic that should be logged.</param>
		private static void LogDiagnostic(Diagnostic diagnostic)
		{
			switch (diagnostic.Severity)
			{
				case DiagnosticSeverity.Error:
					Log.Error("{0}", diagnostic);
					break;
				case DiagnosticSeverity.Warning:
					Log.Warn("{0}", diagnostic);
					break;
				case DiagnosticSeverity.Info:
					Log.Info("{0}", diagnostic);
					break;
				case DiagnosticSeverity.None:
					Log.Debug("{0}", diagnostic);
					break;
				default:
					Assert.NotReached("Unknown C# diagnostic severity.");
					break;
			}
		}
	}
}