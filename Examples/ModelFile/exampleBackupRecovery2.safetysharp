component backupRecoverySystem {
	component in {
		sourceValueField = 1
		
		determineSourceValueR r( ; )
		
		determineSourceValueP p( ; ) {
			.
			    true ->> { sourceValueField := 1 }
			||| true ->> { sourceValueField := 2 }
			||| true ->> { sourceValueField := 3 }
			||| true ->> { sourceValueField := 4 }
			||| true ->> { sourceValueField := 5 }
		}
		
		getSourceValueP p( ; sourceValueInout : int ) {
			.
			sourceValueInout := sourceValueField
		}
		
		determineSourceValueR <-i- determineSourceValueP
		
		behaviour {
			.
			determineSourceValueR ( ; )
		}
	}

	component s1 {		
		senseSourceValueR r( ; sourceValueInout : int )
	
		getSensorValueP p( ; sensorValueInout : int ) {
			.
			senseSourceValueR ( ; sensorValueInout )
		}
		
		behaviour {	. skip }
	}
	
	component s2 {		
		senseSourceValueR r( ; sourceValueInout : int )
	
		getSensorValueP p( ; sensorValueInout : int ) {
			.
			senseSourceValueR ( ; sensorValueInout )
		}
		
		behaviour {	. skip }
	}
	
	component a1 {
		isActiveField = true
		
		getSensorValue1R r( ; sensorValueInout : int )
		getSensorValue2R r( ; sensorValueInout : int )
		doValuesMatchR r( value1In : int , value2In : int; matchInout : bool)
	
		getArithmeticalValueP p( ; arithmeticalValueInout : int ) {
			sensorValue1Local : int ,
			sensorValue2Local : int
			.
			getSensorValue1R ( ; sensorValue1Local ) ;
			getSensorValue2R ( ; sensorValue2Local ) ;
			arithmeticalValueInout := sensorValue1Local
		}

		doValuesMatchP p( value1In : int , value2In : int; matchInout : bool) {
			.
			matchInout := value1In == value2In
		}
		
		doSensorValuesMatchP p( ; sensorValuesMatchInout : bool ) {
			sensorValue1Local : int ,
			sensorValue2Local : int
			.
			getSensorValue1R ( ; sensorValue1Local ) ;
			getSensorValue2R ( ; sensorValue2Local ) ;
			doValuesMatchR ( sensorValue1Local , sensorValue2Local ; sensorValuesMatchInout)
		}
		
		setActiveArithmeticalUnitP p( unitNo : int ; ) {
			.
			    unitNo==1 ->> { isActiveField := true }
			||| unitNo==2 ->> { isActiveField := false }
		}
		
		doValuesMatchR <-i- doValuesMatchP

		behaviour {	. skip }
	}
	
	component a2 {
		isActiveField = false
		
		getSensorValueR r( ; sensorValueInout : int )
	
		getArithmeticalValueP p( ; arithmeticalValueInout : int ) {
			.
			getSensorValueR ( ; arithmeticalValueInout ) 
		}
		
		setActiveArithmeticalUnitP p( unitNo : int ; ) {
			.
			    unitNo==1 ->> { isActiveField := false }
			||| unitNo==2 ->> { isActiveField := true }
		}
		
		behaviour {	. skip }
	}
	
	component monitor {
		doSensorValuesMatchR r( ; sensorValuesMatchInout : bool )
		switchArithmeticalUnitR_PartA r( unitNo : int ; )
		switchArithmeticalUnitR_PartB r( unitNo : int ; )
		switchArithmeticalUnitR_PartC r( unitNo : int ; )
	
		
		behaviour {
			doSensorValuesMatchLocal : bool
			.
			doSensorValuesMatchR ( ; doSensorValuesMatchLocal) ;
			      doSensorValuesMatchLocal ->> { skip } 
			||| ! doSensorValuesMatchLocal ->> {
						switchArithmeticalUnitR_PartA ( 2 ; ) ;
						switchArithmeticalUnitR_PartB ( 2 ; ) ;
						switchArithmeticalUnitR_PartC ( 2 ; )
				}
			
		}
	}

	component out {
		arithUnitNoField = 1
		result = 1
		
		getArithmeticalValue1R r( ; arithmeticalValueInout : int )
		getArithmeticalValue2R r( ; arithmeticalValueInout : int )
		
		setActiveArithmeticalUnitP p( unitNo : int ; ) {
			.
			arithUnitNoField := unitNo
		}
		
		behaviour {
			arithmeticalValueLocal : int
			.
			    arithUnitNoField==1 ->> {getArithmeticalValue1R ( ; arithmeticalValueLocal ) }
			||| arithUnitNoField==2 ->> {getArithmeticalValue2R ( ; arithmeticalValueLocal ) }; 
			result := arithmeticalValueLocal
		}
	}
	
		
	s1.senseSourceValueR <-i- in.getSourceValueP
	s2.senseSourceValueR <-i- in.getSourceValueP
	a1.getSensorValue1R <-i- s1.getSensorValueP
	a1.getSensorValue2R <-i- s2.getSensorValueP
	monitor.doSensorValuesMatchR <-i- a1.doSensorValuesMatchP	
	monitor.switchArithmeticalUnitR_PartA <-i- a2.setActiveArithmeticalUnitP
	monitor.switchArithmeticalUnitR_PartB <-i- a1.setActiveArithmeticalUnitP
	monitor.switchArithmeticalUnitR_PartC <-i- out.setActiveArithmeticalUnitP
	out.getArithmeticalValue1R <-i- a1.getArithmeticalValueP
	out.getArithmeticalValue2R <-i- a2.getArithmeticalValueP
	
	behaviour {
		.
		in ( ) ;
		monitor ( ) ;
		out ( )
	}
}
