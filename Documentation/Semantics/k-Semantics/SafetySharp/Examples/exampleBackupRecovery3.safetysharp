component backupRecoverySystem {
	component in {
		sourceValueField = 1
		
		getSourceValueP p( ; sourceValueInout : int ) {
			.
			sourceValueInout := sourceValueField
		}
		
		behaviour {
			.
			    true ->> { sourceValueField := 1 }
			||| true ->> { sourceValueField := 2 }
			||| true ->> { sourceValueField := 3 }
			||| true ->> { sourceValueField := 4 }
			||| true ->> { sourceValueField := 5 }
		}
	}

	component s1 {
		sensorValueField = 1

		senseSourceValueR r( ; sourceValueInout : int )
	
		getSensorValueP p( ; sensorValueInout : int ) {
			.
			sensorValueInout := sensorValueField
		}
		
		behaviour {
			sensorValueInout : int
			.
			senseSourceValueR ( ; sensorValueInout ) ;
			sensorValueField := sensorValueInout
		}
	}
	
	component s2 {
		sensorValueField = 1

		senseSourceValueR r( ; sourceValueInout : int )
	
		getSensorValueP p( ; sensorValueInout : int ) {
			.
			sensorValueInout := sensorValueField
		}
		
		behaviour {
			sensorValueInout : int
			.
			senseSourceValueR ( ; sensorValueInout ) ;
			sensorValueField := sensorValueInout
		}
	}
	
	component a1 {
		isActiveField = true
		arithmeticalValueField = 1
		doSensorValuesMatchField = true
	
		getSensorValue1R r( ; sensorValueInout : int )
		getSensorValue2R r( ; sensorValueInout : int )
		
	
		getArithmeticalValueP p( ; arithmeticalValueInout : int ) {
			.
			arithmeticalValueInout := arithmeticalValueField
		}
		
		doSensorValuesMatchP p( ; sensorValuesMatchInout : bool ) {
			.
			sensorValuesMatchInout := doSensorValuesMatchField
		}
		
		deactivateP p( ; ) {
			.
			     (isActiveField) ->> { isActiveField := false }
			||| !(isActiveField) ->> { skip }
		}
						
		behaviour {
			sensorValue1Local : int ,
			sensorValue2Local : int
			.
			     (isActiveField) ->> {
				getSensorValue1R ( ; sensorValue1Local ) ;
				getSensorValue2R ( ; sensorValue2Local ) ;
				arithmeticalValueField := sensorValue1Local ;
				doSensorValuesMatchField := sensorValue1Local == sensorValue2Local
			    }
			||| !(isActiveField) ->> {
				skip
			    }
			
		}
	}
	
	component a2 {
		isActiveField = false
		arithmeticalValueField = 1
		
		getSensorValueR r( ; sensorValueInout : int )
	
		getArithmeticalValueP p( ; arithmeticalValueInout : int ) {
			.
			arithmeticalValueInout := arithmeticalValueField
		}
		
		activateP p( ; ) {
			.
			     (isActiveField) ->> { skip }
			||| !(isActiveField) ->> { isActiveField := false }
		}
		
		behaviour {
			arithmeticalValueInout : int
			.
			     (isActiveField) ->> {
				getSensorValueR ( ; arithmeticalValueInout ) ;
				arithmeticalValueField := arithmeticalValueInout
			    }
			||| !(isActiveField) ->> {
				skip
			    }
		}
	}
	
	component monitor {
		doSensorValuesMatchR r( ; sensorValuesMatchInout : bool )
		switchArithmeticalUnitR_PartActivate r( ; )
		switchArithmeticalUnitR_PartDeactivate r( ; )
		switchArithmeticalUnitR_PartSwitchOutput r( ; )
	
		
		behaviour {
			doSensorValuesMatchLocal : bool
			.
			doSensorValuesMatchR ( ; doSensorValuesMatchLocal) ;
			      doSensorValuesMatchLocal ->> { skip } 
			||| ! doSensorValuesMatchLocal ->> {
						switchArithmeticalUnitR_PartActivate ( ; ) ;
						switchArithmeticalUnitR_PartDeactivate ( ; ) ;
						switchArithmeticalUnitR_PartSwitchOutput ( ; )
				}
			
		}
	}

	component out {
		useA1 = true
		result = 1
		
		getArithmeticalValue1R r( ; arithmeticalValueInout : int )
		getArithmeticalValue2R r( ; arithmeticalValueInout : int )
		
		switchArithmeticalUnitP p( ; ) {
			.
			useA1 := ! useA1
		}
		
		behaviour {
			arithmeticalValueLocal : int
			.
			    useA1 ->> {getArithmeticalValue1R ( ; arithmeticalValueLocal ) }
			||| ! useA1 ->>  {getArithmeticalValue2R ( ; arithmeticalValueLocal ) } ;
			
			result := arithmeticalValueLocal
		}
	}
	
		
	s1.senseSourceValueR <-i- in.getSourceValueP
	s2.senseSourceValueR <-i- in.getSourceValueP
	a1.getSensorValue1R <-i- s1.getSensorValueP
	a1.getSensorValue2R <-i- s2.getSensorValueP
	monitor.doSensorValuesMatchR <-i- a1.doSensorValuesMatchP	
	monitor.switchArithmeticalUnitR_PartActivate <-i- a2.activateP
	monitor.switchArithmeticalUnitR_PartDeactivate <-i- a1.deactivateP
	monitor.switchArithmeticalUnitR_PartSwitchOutput <-i- out.switchArithmeticalUnitP
	out.getArithmeticalValue1R <-i- a1.getArithmeticalValueP
	out.getArithmeticalValue2R <-i- a2.getArithmeticalValueP
	
	behaviour {
		.
		in ( ) ;
		s1 ( ) ;
		s2 ( ) ;
		a1 ( ) ;
		monitor ( ) ;
		a2 ( ) ;
		out ( )
	}
}
